name: Build AOSC OS Docker Images

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build all images regardless of existing tags'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.repository_owner }}
  RELEASES_URL: https://releases.aosc.io/manifest/recipe.json

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Base variant images
          - variant: "Base"
            aosc_arch: "amd64"
            docker_platform: "linux/amd64"
          - variant: "Base"
            aosc_arch: "arm64"
            docker_platform: "linux/arm64"
          - variant: "Base"
            aosc_arch: "riscv64"
            docker_platform: "linux/riscv64"
          - variant: "Base"
            aosc_arch: "ppc64el"
            docker_platform: "linux/ppc64le"
          - variant: "Base"
            aosc_arch: "loongarch64"
            docker_platform: "linux/loong64"
          - variant: "Base"
            aosc_arch: "loongson3"
            docker_platform: "linux/mips64le/loongson3"
          
          # BuildKit variant images
          - variant: "BuildKit"
            aosc_arch: "amd64"
            docker_platform: "linux/amd64"
          - variant: "BuildKit"
            aosc_arch: "arm64"
            docker_platform: "linux/arm64"
          - variant: "BuildKit"
            aosc_arch: "riscv64"
            docker_platform: "linux/riscv64"
          - variant: "BuildKit"
            aosc_arch: "ppc64el"
            docker_platform: "linux/ppc64le"
          - variant: "BuildKit"
            aosc_arch: "loongarch64"
            docker_platform: "linux/loong64"
          - variant: "BuildKit"
            aosc_arch: "loongson3"
            docker_platform: "linux/mips64le/loongson3"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for latest release
        id: release-info
        run: |
          VARIANT_NAME="${{ matrix.variant }}"
          
          echo "Checking for variant: ${VARIANT_NAME}, architecture: ${{ matrix.aosc_arch }}"
          
          MANIFEST=$(curl -s "$RELEASES_URL")
          
          LATEST_RELEASE=$(echo "$MANIFEST" | jq --arg variant "$VARIANT_NAME" --arg arch "${{ matrix.aosc_arch }}" '
            [.variants[] | 
             select(.name == $variant) |
             .tarballs[] |
             select(.arch == $arch) |
             select(.date != null)] |
            sort_by(.date) |
            last
          ')
          
          if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
            echo "No release found for variant: ${VARIANT_NAME}, arch: ${{ matrix.aosc_arch }}"
            echo "found=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          DATE=$(echo "$LATEST_RELEASE" | jq -r '.date')
          TARBALL_PATH=$(echo "$LATEST_RELEASE" | jq -r '.path')
          SHA256SUM=$(echo "$LATEST_RELEASE" | jq -r '.sha256sum')
          
          echo "Found release: $DATE"
          echo "Tarball path: $TARBALL_PATH"
          
          echo "found=true" >> $GITHUB_OUTPUT
          echo "date=${DATE}" >> $GITHUB_OUTPUT
          echo "tarball_path=${TARBALL_PATH}" >> $GITHUB_OUTPUT
          echo "sha256sum=${SHA256SUM}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        if: steps.release-info.outputs.found == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image name and tags
        id: image-info
        if: steps.release-info.outputs.found == 'true'
        run: |
          # Generate repository name (lowercase for Docker compatibility)
          REPOSITORY=$(echo "${{ env.REGISTRY_USER }}/aosc-os" | tr '[:upper:]' '[:lower:]')
          
          # Convert variant to lowercase for tag
          VARIANT_LOWER=$(echo "${{ matrix.variant }}" | tr '[:upper:]' '[:lower:]')
          
          # Generate primary tag with date
          VERSIONED_TAG="${VARIANT_LOWER}-${{ steps.release-info.outputs.date }}-${{ matrix.aosc_arch }}"
          
          # Also create simple variant tag
          SIMPLE_TAG="${VARIANT_LOWER}"
          
          # Generate complete tags list
          TAGS="${{ env.REGISTRY }}/${REPOSITORY}:${VERSIONED_TAG}
          ${{ env.REGISTRY }}/${REPOSITORY}:${SIMPLE_TAG}"
          
          echo "repository=${REPOSITORY}" >> $GITHUB_OUTPUT
          echo "versioned_tag=${VERSIONED_TAG}" >> $GITHUB_OUTPUT
          echo "simple_tag=${SIMPLE_TAG}" >> $GITHUB_OUTPUT
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "${TAGS}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Will build with tags:"
          echo "${TAGS}"

      - name: Check if Docker tag exists
        id: check-tag
        if: steps.release-info.outputs.found == 'true'
        uses: tyriis/docker-image-tag-exists@v2.0.1
        with:
          registry: ${{ env.REGISTRY }}
          repository: ${{ steps.image-info.outputs.repository }}
          tag: ${{ steps.image-info.outputs.versioned_tag }}

      - name: Create Dockerfile
        if: steps.release-info.outputs.found == 'true' && (steps.check-tag.outputs.tag == 'not found' || github.event.inputs.force_build == 'true')
        run: |
          cat > Dockerfile << EOF
          FROM scratch
          LABEL maintainer="AOSC-dev"
          ADD "https://releases.aosc.io/${{ steps.release-info.outputs.tarball_path }}" /
          CMD ["/bin/bash"]
          ARG CONT_IMG_VER
          ENV CONT_IMG_VER ${{ steps.release-info.outputs.date }}
          EOF
          
          echo "Generated Dockerfile:"
          cat Dockerfile

      - name: Build and push Docker image
        if: steps.release-info.outputs.found == 'true' && (steps.check-tag.outputs.tag == 'not found' || github.event.inputs.force_build == 'true')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.docker_platform }}
          push: true
          tags: ${{ steps.image-info.outputs.tags }}
          labels: |
            org.opencontainers.image.title=AOSC OS ${{ matrix.variant }}
            org.opencontainers.image.description=AOSC OS ${{ matrix.variant }} container image for ${{ matrix.aosc_arch }}
            org.opencontainers.image.version=${{ steps.release-info.outputs.date }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}

  create-manifests:
    needs: check-and-build
    runs-on: ubuntu-latest
    if: always()
    permissions:
      packages: write
      contents: read
    
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get registry tags and create manifests
        run: |
          # Generate repository name (lowercase for Docker compatibility)
          REPOSITORY=$(echo "${{ env.REGISTRY_USER }}/aosc-os" | tr '[:upper:]' '[:lower:]')
          FULL_REPO="${{ env.REGISTRY }}/${REPOSITORY}"
          
          echo "Fetching tags for: ${FULL_REPO}"
          
          # Get all tags from the registry using the GitHub Container Registry API
          TAGS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://${FULL_REPO}/v2/${REPOSITORY}/tags/list" | \
            jq -r '.tags[]? // empty' | \
            grep -E '^(base|buildkit)-[0-9]{8}-(amd64|arm64|riscv64|ppc64el|loongarch64|loongson3)$' || echo "")
          
          echo "Found tags:"
          echo "$TAGS" | tr ' ' '\n' | sort
          
          # Group tags by variant and date
          MANIFEST_GROUPS=""
          
          for TAG in $TAGS; do
            # Parse tag format: variant-date-arch
            if [[ "$TAG" =~ ^([^-]+)-([0-9]{8})-([^-]+)$ ]]; then
              VARIANT="${BASH_REMATCH[1]}"
              DATE="${BASH_REMATCH[2]}"
              ARCH="${BASH_REMATCH[3]}"
              
              GROUP_KEY="${VARIANT}-${DATE}"
              
              # Add to manifest groups
              if ! echo "$MANIFEST_GROUPS" | grep -q "^${GROUP_KEY}:"; then
                MANIFEST_GROUPS="${MANIFEST_GROUPS}${GROUP_KEY}:${FULL_REPO}:${TAG}"$'\n'
              else
                MANIFEST_GROUPS=$(echo "$MANIFEST_GROUPS" | sed "s|^${GROUP_KEY}:\(.*\)|${GROUP_KEY}:\1 ${FULL_REPO}:${TAG}|")
              fi
            fi
          done
          
          echo "Manifest groups to create:"
          echo "$MANIFEST_GROUPS"
          
          # Create manifests for each group
          echo "$MANIFEST_GROUPS" | while IFS=: read -r GROUP_KEY IMAGES; do
            if [ -n "$GROUP_KEY" ] && [ -n "$IMAGES" ]; then
              VARIANT=$(echo "$GROUP_KEY" | cut -d'-' -f1)
              DATE=$(echo "$GROUP_KEY" | cut -d'-' -f2)
              
              VERSIONED_TAG="${GROUP_KEY}"
              SIMPLE_TAG="${VARIANT}"
              
              echo "Creating manifest for: ${VERSIONED_TAG}"
              echo "Images: ${IMAGES}"
              
              # Create versioned manifest
              if docker manifest create "${FULL_REPO}:${VERSIONED_TAG}" ${IMAGES} 2>/dev/null; then
                docker manifest push "${FULL_REPO}:${VERSIONED_TAG}"
                echo "✓ Created versioned manifest: ${VERSIONED_TAG}"
              else
                echo "✗ Failed to create versioned manifest: ${VERSIONED_TAG}"
              fi
              
              # Create or update simple variant manifest (latest for this variant)
              if docker manifest create "${FULL_REPO}:${SIMPLE_TAG}" ${IMAGES} --amend 2>/dev/null; then
                docker manifest push "${FULL_REPO}:${SIMPLE_TAG}"
                echo "✓ Updated simple manifest: ${SIMPLE_TAG}"
              else
                echo "✗ Failed to create simple manifest: ${SIMPLE_TAG}"
              fi
            fi
          done
          
          echo "Manifest creation completed"
